BaseClasses.py:
    def can_use_bombs(self, player):
        return (self.has('Bomb Upgrade (+10)', player) or not self.world.futuro[player])

Kill rooms are defined by std_kill_rooms[] in "Rules.py" and get standard_escape_rule() added, which now includes "or can_use_bombs".

New location rules:
    set_rule(world.get_location('Attic Cracked Floor', player), lambda state: state.can_use_bombs(player))

New entrance rules:
    set_rule(world.get_entrance('Skull Pot Circle WN', player), lambda state: state.can_use_bombs(player))
    set_rule(world.get_entrance('Ice Bomb Drop Hole', player), lambda state: state.can_use_bombs(player))
    set_rule(world.get_entrance('Mire Crystal Mid NW', player), lambda state: state.can_use_bombs(player))
    set_rule(world.get_entrance('TR Dash Room NW', player), lambda state: state.can_use_bombs(player) or state.has_Boots(player)) 
    set_rule(world.get_entrance('TR Crystaroller SW', player), lambda state: state.can_use_bombs(player) or state.has_Boots(player))
    set_rule(world.get_entrance('TR Dash Room ES', player), lambda state: state.can_use_bombs(player) or state.has_Boots(player))
    for entrance in ['PoD Warp Hint SE', 'PoD Jelly Hall NW', 'PoD Jelly Hall NE', 'PoD Mimics 1 SW']:
        set_rule(world.get_entrance(entrance, player), lambda state: state.can_use_bombs(player) or state.has_Boots(player))
    for entrance in ['PoD Pit Room Bomb Hole', 'PoD Map Balcony WS', 'PoD Arena Ledge ES', 'PoD Dark Maze E', 'PoD Big Chest Balcony W']:
        set_rule(world.get_entrance(entrance, player), lambda state: state.can_use_bombs(player))
    for entrance in ['GT Warp Maze (Rails) WS', 'GT Bob\'s Room Hole', 'GT Randomizer Room ES', 'GT Bomb Conveyor SW', 'GT Crystal Circles NW']:
        set_rule(world.get_entrance(entrance, player), lambda state: state.can_use_bombs(player))
